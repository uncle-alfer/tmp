@startuml to-be-container
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' ----------------------------------------------------------
' Actors
Person(user, "Пользователь", "Web, Smart TV, Mobile apps")

' ----------------------------------------------------------
' System boundary
System_Boundary(cinema, "Сервис «КиноБездна»") {

    Container(api,       "API Gateway",           "Go 1.23 / Fiber",        "Единая точка входа, rate-limit, feature-flags")
    Container(auth,      "Identity Service",      "Keycloak 23",            "OAuth 2.1 / JWT, SSO")
    Container(movies,    "Catalog Service",       "Go 1.23 / gRPC",         "Метаданные фильмов, поиск")
    Container(stream,    "Streaming Edge",        "Nginx 1.25 + HLS/DASH",  "Отдача сегментов; origin pull из S3")
    Container(payments,  "Payments & Billing",    "Node 20 / NestJS",       "Подписки, жизненный цикл платежей")
    Container(reco,      "Recommendation Facade", "Python 3.11 / FastAPI",  "Прослойка к ML-сервису")
    Container(events,    "Events Service",        "Go 1.23",               "Outbox-producer, Kafka-consumer")
    Container(admin,     "Back-office UI",        "React + Vite",           "Контент-менеджмент, отчётность")

    ' ----- Databases -----
    ContainerDb(pg_movies,   "PostgreSQL 15 – movies",   "SQL", "schema: movies")
    ContainerDb(pg_billing,  "PostgreSQL 15 – billing",  "SQL", "schema: billing")
    ContainerDb(ks,          "Kafka 3.6 (Confluent)",    "Kafka", "topics: user-events, billing, viewing")
    Container_Ext(s3,        "AWS S3 «kino-media»",      "Object Storage", "Master-файлы, постеры")

    ' ----- Internal sync -----
    Rel(user, api,           "HTTPS/JSON")
    Rel(api, auth,           "OAuth flows (sync)")
    Rel(api, movies,         "gRPC (sync)")
    Rel(api, stream,         "Signed URL → HLS (sync)")
    Rel(api, payments,       "REST/JSON (sync)")
    Rel(api, reco,           "REST/JSON (sync)")
    Rel(admin, api,          "HTTPS/JSON")

    ' ----- Internal async -----
    Rel_L(movies,   events,  "Domain events (outbox)", "CDC wal2json")
    Rel(events,     ks,      "Produce → user-events, billing, viewing")
    Rel_L(payments, ks,      "Consume user-events, produce billing")

    ' DB connections
    Rel(movies,    pg_movies,  "JDBC")
    Rel(events,    pg_movies,  "JDBC (outbox)")
    Rel(payments,  pg_billing, "JDBC")

    ' Storage & CDN
    Rel(stream,    s3,        "GET signed chunks")

}

' ----------------------------------------------------------
' External systems
Container_Ext(cdn,       "AWS CloudFront CDN", "CDN", "Edge-cache HLS/DASH")
Container_Ext(reco_ext,  "ML Recommendation Engine", "SaaS", "gRPC / REST")
Container_Ext(pay_gate,  "Stripe", "SaaS", "Payment processing")
Container_Ext(prom,      "Observability Stack", "Prometheus + Grafana / OTEL", "Метрики, трейсы")

' ----- External relationships -----
Rel(user,       cdn,      "HTTPS (HLS)")
Rel_D(cdn,      stream,   "Cache miss / origin pull")
Rel(stream,     cdn,      "Purge / signed URLs")
Rel(reco,       reco_ext, "REST/JSON (sync)")
Rel(payments,   pay_gate, "HTTPS (sync) / Webhooks (async)")

' Observability
Rel_D(api,      prom,     "metrics / traces")
Rel_D(movies,   prom,     "metrics / traces")
Rel_D(payments, prom,     "metrics / traces")
Rel_D(stream,   prom,     "metrics / traces")
Rel_D(events,   prom,     "metrics / traces")

@enduml
